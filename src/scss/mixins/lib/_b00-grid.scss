/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 60px;
$gutter-width: 20px;
$columns: 12;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns:$columns) {
	@return ($column-width * $columns) + ($gutter-width * $columns);
}

// Set $total-width to 100% for a fluid layout
$total-width: gridsystem-width($columns);

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}

//////////
// GRID //
//////////

body {
	width: 100%;
	@include clearfix();
}

@mixin row($columns:$columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
	margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	// *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
	// *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
	@include clearfix();
}
@mixin column($x,$columns:$columns) {
	display: inline;
	float: left;
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
	margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
	// *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
	// *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
}
@mixin push($offset:1) {
	margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
	margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}


  /* Table sizing

    * Use Case *
    <table>
      <colgroup>
          <col>
          <col class="t20">
          <col class="t20">
          <col class="t20">
      </colgroup>
      <tbody>
      </tbody>
    </table>

  */

.t10    { width:10%; }
.t20    { width:20%; }
.t25    { width:25%; }
.t30    { width:30%; }
.t33    { width:33.333%; }
.t40    { width:40%; }
.t50    { width:50%; }
.t60    { width:60%; }
.t66    { width:66.666%; }
.t70    { width:70%; }
.t75    { width:75%; }
.t80    { width:80%; }
.t90    { width:90%; }


//Responsive help
body.responsive-help {
  padding-bottom:2em;
  &:after {
    display: table;
    position:fixed;
    bottom:0;
    left:0;
    right:0;
    height:2em;
    line-height:2em;
    color:#f00;
    width:100%;
    padding:0 2em;
    background-color:rgba(255,0,0,.25);
    z-index:1000;
    @include respond-to(handheld) {
      content: "handheld";
    }
    @include respond-to(handheld-landscape) {
      content: "handheld";
    }
    @include respond-to(handheld-portrait) {
      content: "handheld";
    }

    @include respond-to(tablet) {
      content: "tablet";
    }
    @include respond-to(tablet-landscape) {
      content: "tablet-landscape";
    }
    @include respond-to(tablet-portrait) {
      content: "tablet-portrait";
    }

    @include respond-to(tablet-large) {
      content: "tablet-large";
    }
    @include respond-to(tablet-large-landscape) {
      content: "tablet-large-landscape";
    }
    @include respond-to(tablet-large-portrait) {
      content: "tablet-large-portrait";
    }

    @include respond-to(desktop) {
      content: "desktop";
    }

    @include respond-to(desktop-large) {
      content: "desktop-large";
    }
    @include respond-to(retina-display) {
      content: "retina-display";
    }
  }
}
